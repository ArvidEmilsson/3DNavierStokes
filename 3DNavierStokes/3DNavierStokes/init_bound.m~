function params = init_bound(params) 


for i =1:length(params.boundaries)
    %disp(params.boundaries{i}.name)
    spaceIndex = params.boundaries{i}.surface(1) ;     
    if params.geom.periodic(spaceIndex)
        error('boundary for periodic direction?')
    end
    
    n0 = [1,1,1,]       ; 
    n1 = params.geom.n  ;
    
    if params.boundaries{i}.surface(2) == 0,
        error('obsolet should be -1')
    end
    
    if  params.boundaries{i}.surface(2)==-1
        index = 1 ; 
    else
        index = params.geom.n(spaceIndex) ;
    end
    
    n0(spaceIndex) = index ;  
    n1(spaceIndex) = index ;  
    params.boundaries{i}.n0 = n0 ; 
    params.boundaries{i}.n1 = n1 ; 
    
    %%% 
    switch params.boundaries{i}.name
        case {'slipEuler','nonSlipFlux','nonreflecting'}
            sign = params.boundaries{i}.surface(2)  ;      
            
            e       = params.geom.m(n0(1):n1(1),n0(2):n1(2),n0(3):n1(3),spaceIndex,:)*sign ;
            normE   = sqrt(e(:,:,:,1,1).^2 + e(:,:,:,1,2).^2 + e(:,:,:,1,3).^2 ); 
           
            sE      = size(e) ;  
            params.boundaries{i}.e = reshape(e, [sE(1:3) 3]); 
            params.boundaries{i}.e(:,:,:,1)  = params.boundaries{i}.e(:,:,:,1)./reshape(normE, [sE(1:3)]);
            params.boundaries{i}.e(:,:,:,2)  = params.boundaries{i}.e(:,:,:,2)./reshape(normE, [sE(1:3)]);
            params.boundaries{i}.e(:,:,:,3)  = params.boundaries{i}.e(:,:,:,3)./reshape(normE, [sE(1:3)]);
        otherwise
            error('no such bound') 
    end
    
   switch 
       
       nd
       
end
   


end